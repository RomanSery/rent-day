[{"C:\\Users\\Roman\\rent-day\\src\\index.tsx":"1","C:\\Users\\Roman\\rent-day\\src\\client\\App.tsx":"2","C:\\Users\\Roman\\rent-day\\src\\client\\helpers.ts":"3","C:\\Users\\Roman\\rent-day\\src\\client\\sockets\\SocketService.ts":"4","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\PageType.ts":"5","C:\\Users\\Roman\\rent-day\\src\\client\\join\\JoinGame.tsx":"6","C:\\Users\\Roman\\rent-day\\src\\client\\components\\GameBoard.tsx":"7","C:\\Users\\Roman\\rent-day\\src\\client\\join\\DisplayAllGames.tsx":"8","C:\\Users\\Roman\\rent-day\\src\\client\\join\\StaticBoard.tsx":"9","C:\\Users\\Roman\\rent-day\\src\\client\\join\\CreateGame.tsx":"10","C:\\Users\\Roman\\rent-day\\src\\client\\api.ts":"11","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\PieceType.ts":"12","C:\\Users\\Roman\\rent-day\\src\\core\\types\\GameEvent.ts":"13","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\GameStatus.ts":"14","C:\\Users\\Roman\\rent-day\\src\\core\\config\\NyTheme.ts":"15","C:\\Users\\Roman\\rent-day\\src\\client\\components\\GameSquare.tsx":"16","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\SquareType.ts":"17","C:\\Users\\Roman\\rent-day\\src\\client\\components\\SquarePieces.tsx":"18","C:\\Users\\Roman\\rent-day\\src\\client\\components\\GamePiece.tsx":"19","C:\\Users\\Roman\\rent-day\\src\\core\\config\\SquareData.ts":"20","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\BoardSection.ts":"21","C:\\Users\\Roman\\rent-day\\src\\client\\components\\SquareInfo.tsx":"22","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\PlayerClass.ts":"23","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\GoDisplay.tsx":"24","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\CentralParkDisplay.tsx":"25","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\UtilityDisplay.tsx":"26","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\PropertyDisplay.tsx":"27","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\TrainStationDisplay.tsx":"28","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\ChanceDisplay.tsx":"29","C:\\Users\\Roman\\rent-day\\src\\client\\components\\CenterDisplay.tsx":"30","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\squareHelpers.ts":"31","C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayAuction.tsx":"32","C:\\Users\\Roman\\rent-day\\src\\client\\components\\SquareViewer.tsx":"33","C:\\Users\\Roman\\rent-day\\src\\client\\components\\PlayerViewer.tsx":"34","C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayResults.tsx":"35","C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayActions.tsx":"36","C:\\Users\\Roman\\rent-day\\src\\client\\squares\\ColorBar.tsx":"37","C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayPlayers.tsx":"38","C:\\Users\\Roman\\rent-day\\src\\core\\enums\\SkillType.ts":"39","C:\\Users\\Roman\\rent-day\\src\\client\\components\\useIsMountedRef.tsx":"40","C:\\Users\\Roman\\rent-day\\src\\client\\components\\CircleLoader.tsx":"41","C:\\Users\\Roman\\rent-day\\src\\client\\components\\AnimatedDice.tsx":"42","C:\\Users\\Roman\\rent-day\\src\\client\\components\\Die.tsx":"43","C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayPlayer.tsx":"44","C:\\Users\\Roman\\rent-day\\src\\client\\auth\\SignUpPage.tsx":"45","C:\\Users\\Roman\\rent-day\\src\\client\\auth\\LoginPage.tsx":"46"},{"size":535,"mtime":1607303474300,"results":"47","hashOfConfig":"48"},{"size":5106,"mtime":1609532264922,"results":"49","hashOfConfig":"48"},{"size":4016,"mtime":1609531533697,"results":"50","hashOfConfig":"48"},{"size":1686,"mtime":1609378085172,"results":"51","hashOfConfig":"48"},{"size":79,"mtime":1606692113968,"results":"52","hashOfConfig":"48"},{"size":8616,"mtime":1609377758515,"results":"53","hashOfConfig":"48"},{"size":3502,"mtime":1609377738681,"results":"54","hashOfConfig":"48"},{"size":2342,"mtime":1609365158838,"results":"55","hashOfConfig":"48"},{"size":1544,"mtime":1609377792432,"results":"56","hashOfConfig":"48"},{"size":1927,"mtime":1609455530305,"results":"57","hashOfConfig":"48"},{"size":105,"mtime":1605487063220,"results":"58","hashOfConfig":"48"},{"size":105,"mtime":1602807721975,"results":"59","hashOfConfig":"48"},{"size":386,"mtime":1609109689648,"results":"60","hashOfConfig":"48"},{"size":77,"mtime":1605484767293,"results":"61","hashOfConfig":"48"},{"size":1546,"mtime":1608931960194,"results":"62","hashOfConfig":"48"},{"size":2316,"mtime":1608931342378,"results":"63","hashOfConfig":"48"},{"size":159,"mtime":1608931276317,"results":"64","hashOfConfig":"48"},{"size":729,"mtime":1609378237655,"results":"65","hashOfConfig":"48"},{"size":529,"mtime":1606687359912,"results":"66","hashOfConfig":"48"},{"size":9850,"mtime":1609380587214,"results":"67","hashOfConfig":"48"},{"size":85,"mtime":1600907439871,"results":"68","hashOfConfig":"48"},{"size":1639,"mtime":1608931401179,"results":"69","hashOfConfig":"48"},{"size":78,"mtime":1608775042479,"results":"70","hashOfConfig":"48"},{"size":568,"mtime":1600734431869,"results":"71","hashOfConfig":"48"},{"size":322,"mtime":1600734431861,"results":"72","hashOfConfig":"48"},{"size":1441,"mtime":1609378270504,"results":"73","hashOfConfig":"48"},{"size":1801,"mtime":1609377803857,"results":"74","hashOfConfig":"48"},{"size":1259,"mtime":1609350675935,"results":"75","hashOfConfig":"48"},{"size":578,"mtime":1600734431864,"results":"76","hashOfConfig":"48"},{"size":3880,"mtime":1609346791044,"results":"77","hashOfConfig":"48"},{"size":1473,"mtime":1609378278396,"results":"78","hashOfConfig":"48"},{"size":6454,"mtime":1609377849580,"results":"79","hashOfConfig":"48"},{"size":11059,"mtime":1609378145380,"results":"80","hashOfConfig":"48"},{"size":3605,"mtime":1609380819887,"results":"81","hashOfConfig":"48"},{"size":2024,"mtime":1609373814016,"results":"82","hashOfConfig":"48"},{"size":2917,"mtime":1609378172838,"results":"83","hashOfConfig":"48"},{"size":479,"mtime":1601070876530,"results":"84","hashOfConfig":"48"},{"size":817,"mtime":1608762735310,"results":"85","hashOfConfig":"48"},{"size":83,"mtime":1608845403301,"results":"86","hashOfConfig":"48"},{"size":332,"mtime":1609372977808,"results":"87","hashOfConfig":"48"},{"size":1287,"mtime":1609342127732,"results":"88","hashOfConfig":"48"},{"size":1107,"mtime":1609340812971,"results":"89","hashOfConfig":"48"},{"size":382,"mtime":1609375188238,"results":"90","hashOfConfig":"48"},{"size":1876,"mtime":1609378190317,"results":"91","hashOfConfig":"48"},{"size":1609,"mtime":1609458379680,"results":"92","hashOfConfig":"48"},{"size":1680,"mtime":1609465259984,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1v33dya",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"C:\\Users\\Roman\\rent-day\\src\\index.tsx",[],["191","192"],"C:\\Users\\Roman\\rent-day\\src\\client\\App.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\helpers.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\sockets\\SocketService.ts",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\PageType.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\join\\JoinGame.tsx",["193","194","195"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { GameContext } from \"../../core/types/GameContext\";\r\nimport { GameState } from \"../../core/types/GameState\";\r\nimport { getGameContextFromLocalStorage, getIconProp, getMyGameId, hasJoinedGame, leaveCurrentGameIfJoined, setJoinedGameStorage } from \"../helpers\";\r\nimport API from '../api';\r\nimport { Player } from \"../../core/types/Player\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { PieceType } from \"../../core/enums/PieceType\";\r\nimport { SocketService } from \"../sockets/SocketService\";\r\nimport { GameEvent } from \"../../core/types/GameEvent\";\r\nimport { Button, Chip, Container, FormControl, InputLabel, List, ListItem, ListItemIcon, ListItemText, NativeSelect, Snackbar, TextField, Typography } from \"@material-ui/core\";\r\nimport { JoinedGameMsg, LatencyInfoMsg } from \"../../core/types/messages\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUsers, faDollarSign } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { PlayerClass } from \"../../core/enums/PlayerClass\";\r\n\r\n\r\ninterface Props {\r\n  socketService: SocketService;\r\n}\r\n\r\ntype Inputs = {\r\n  playerName: string;\r\n  piece: PieceType;\r\n  playerClass: PlayerClass;\r\n};\r\n\r\nexport const JoinGame: React.FC<Props> = ({ socketService }) => {\r\n\r\n  const history = useHistory();\r\n  const context: GameContext = getGameContextFromLocalStorage();\r\n\r\n  const [gameState, setGameState] = useState<GameState>();\r\n  const [snackOpen, setSnackOpen] = useState<boolean>(false);\r\n  const [snackMsg, setSnackMsg] = useState<string>(\"\");\r\n  const [pings, setPings] = useState<LatencyInfoMsg[]>();\r\n\r\n\r\n  const { register, handleSubmit, errors } = useForm<Inputs>();\r\n\r\n\r\n  useEffect(() => {\r\n    getGameState();\r\n  }, [context.gameId, context.playerId]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    socketService.listenForEvent(GameEvent.JOINED_GAME, (data: JoinedGameMsg) => {\r\n      if (data.allJoined) {\r\n        history.push(\"/gameinstance\");\r\n      } else {\r\n        getGameState();\r\n        setSnackMsg(data.playerName + \" has joined\");\r\n        setSnackOpen(true);\r\n      }\r\n    });\r\n\r\n    socketService.listenForEvent(GameEvent.LEAVE_GAME, (data: any) => {\r\n      setSnackMsg(data);\r\n      setSnackOpen(true);\r\n      getGameState();\r\n    });\r\n\r\n    socketService.listenForEvent(GameEvent.GET_LATENCY, (data: any) => {\r\n      setPings(data);\r\n    });\r\n\r\n    socketService.sendPingToServer();\r\n\r\n\r\n    return function cleanup() {\r\n      if (socketService) {\r\n        socketService.disconnect();\r\n      }\r\n    };\r\n  }, [context.gameId]);\r\n\r\n\r\n\r\n\r\n  const getGameState = () => {\r\n    API.post(\"getGame\", { gameId: context.gameId })\r\n      .then(function (response) {\r\n        setGameState(response.data.game);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n\r\n  const onJoinGame: SubmitHandler<Inputs> = (data) => {\r\n\r\n    API.post(\"joinGame\", { gameId: context.gameId, name: data.playerName, piece: data.piece, playerClass: data.playerClass })\r\n      .then(function (response) {\r\n        if (socketService) {\r\n          socketService.socket.emit(GameEvent.JOINED_GAME, {\r\n            playerName: response.data.playerName,\r\n            playerId: response.data.playerId,\r\n            allJoined: response.data.allJoined,\r\n            gameId: context.gameId\r\n          });\r\n        }\r\n\r\n        setJoinedGameStorage(context.gameId, response.data.playerId, response.data.playerName);\r\n        getGameState();\r\n\r\n        if (response.data.allJoined) {\r\n          history.push(\"/gameinstance\");\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          alert(error.response.data);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error.message);\r\n        }\r\n      });\r\n\r\n  };\r\n\r\n  const getColorStyle = (): React.CSSProperties => {\r\n    return { borderColor: \"#000000\" };\r\n  };\r\n\r\n  const onLeaveGame = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    event.preventDefault();\r\n\r\n    socketService.socket.emit(GameEvent.LEAVE_GAME, getMyGameId());\r\n\r\n    leaveCurrentGameIfJoined(() => {\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  const closeSnack = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnackOpen(false);\r\n  };\r\n\r\n  const getNumPlayers = () => {\r\n    return \"Players: \" + gameState?.players.length + \" / \" + gameState?.settings.maxPlayers;\r\n  }\r\n\r\n\r\n  const getPing = (playerId: string | undefined) => {\r\n    if (playerId && pings) {\r\n      const pingInfo = pings.find(\r\n        (p: LatencyInfoMsg) => p.playerId === playerId\r\n      );\r\n      if (pingInfo) {\r\n        return \"Ping: \" + pingInfo.latency + \"ms\";\r\n      }\r\n    }\r\n    return \"Ping: 0ms\";\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"xs\">\r\n        <Typography component=\"h2\" variant=\"h5\">{gameState?.name}</Typography>\r\n\r\n        <List dense={true} className=\"game-settings\">\r\n          <ListItem>\r\n            <ListItemIcon> <FontAwesomeIcon icon={faUsers} size=\"2x\" /> </ListItemIcon>\r\n            <ListItemText primary={getNumPlayers()} />\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon> <FontAwesomeIcon icon={faDollarSign} size=\"2x\" /> </ListItemIcon>\r\n            <ListItemText primary={gameState?.settings.initialMoney} />\r\n          </ListItem>\r\n        </List>\r\n\r\n\r\n        {!hasJoinedGame() &&\r\n          <form onSubmit={handleSubmit(onJoinGame)}>\r\n\r\n            <TextField label=\"Name\" fullWidth={true} name=\"playerName\" required={true}\r\n              inputRef={register({ required: true, maxLength: 10, minLength: 4 })} />\r\n\r\n            <FormControl fullWidth >\r\n              <InputLabel htmlFor=\"piece-type\">Piece Type</InputLabel>\r\n              <NativeSelect id=\"piece-type\" name=\"piece\" required={true} fullWidth={true} inputRef={register({ required: true })} >\r\n                <option value=\"1\">Pawn</option>\r\n                <option value=\"2\">Hat</option>\r\n                <option value=\"3\">Car</option>\r\n                <option value=\"4\">Bicycle</option>\r\n                <option value=\"5\">Cat</option>\r\n                <option value=\"6\">Dog</option>\r\n              </NativeSelect>\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth >\r\n              <InputLabel htmlFor=\"class-type\">Class Type</InputLabel>\r\n              <NativeSelect id=\"class-type\" name=\"playerClass\" required={true} fullWidth={true} inputRef={register({ required: true })} >\r\n                <option value=\"1\">Broker</option>\r\n                <option value=\"2\">Conductor</option>\r\n                <option value=\"3\">Banker</option>\r\n              </NativeSelect>\r\n            </FormControl>\r\n\r\n            <br />\r\n\r\n            <input type=\"submit\" value=\"Join\" />\r\n          </form>\r\n        }\r\n\r\n        {hasJoinedGame() &&\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={onLeaveGame}>\r\n            Leave Game\r\n         </Button>\r\n        }\r\n\r\n      </Container>\r\n\r\n      <div className=\"players-display\">\r\n        {gameState?.players.map((p: Player, index) => {\r\n          return (\r\n            <React.Fragment key={p._id}>\r\n              <div className=\"player-info\" style={getColorStyle()}>\r\n                <div className=\"container\">\r\n                  <Chip clickable={false} color=\"primary\" size=\"medium\" variant=\"outlined\"\r\n                    icon={<FontAwesomeIcon icon={getIconProp(p.type)} size=\"2x\" />}\r\n                    label={p.name} />\r\n                  <div className=\"player-class\">{PlayerClass[p.playerClass]}</div>\r\n                  <div className=\"ping\">{getPing(p._id)}</div>\r\n\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n          )\r\n        })}\r\n      </div>\r\n\r\n\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={closeSnack}\r\n        open={snackOpen} autoHideDuration={5000} message={snackMsg}\r\n      />\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\Roman\\rent-day\\src\\client\\components\\GameBoard.tsx",["196","197"],"import React, { useEffect, useState } from \"react\";\r\nimport { GameContext } from \"../../core/types/GameContext\";\r\nimport { GameState } from \"../../core/types/GameState\";\r\nimport { getGameContextFromLocalStorage } from \"../helpers\";\r\nimport { GameSquare } from \"./GameSquare\";\r\nimport API from '../api';\r\nimport { CenterDisplay } from \"./CenterDisplay\";\r\nimport { SocketService } from \"../sockets/SocketService\";\r\nimport { GameEvent } from \"../../core/types/GameEvent\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport { LatencyInfoMsg } from \"../../core/types/messages\";\r\n\r\ninterface Props {\r\n  socketService: SocketService;\r\n}\r\n\r\nexport const GameBoard: React.FC<Props> = ({ socketService }) => {\r\n\r\n  const num_squares: Array<number> = Array.from(Array(40));\r\n  const context: GameContext = getGameContextFromLocalStorage();\r\n\r\n  const [gameState, setGameState] = useState<GameState>();\r\n  const [snackOpen, setSnackOpen] = useState<boolean>(false);\r\n  const [snackMsg, setSnackMsg] = useState<string>(\"\");\r\n  const [pings, setPings] = useState<LatencyInfoMsg[]>();\r\n\r\n  const [squareToView, setSquareToView] = useState<number | undefined>(undefined);\r\n\r\n\r\n  useEffect(() => {\r\n    getGameState();\r\n  }, [context.gameId, context.playerId]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    socketService.listenForEvent(GameEvent.LEAVE_GAME, (data: any) => {\r\n      getGameState();\r\n      setSnackMsg(data);\r\n      setSnackOpen(true);\r\n    });\r\n\r\n    socketService.listenForEvent(GameEvent.GET_LATENCY, (data: LatencyInfoMsg[]) => {\r\n      setPings(data);\r\n    });\r\n\r\n    socketService.sendPingToServer();\r\n\r\n\r\n    socketService.listenForEvent(GameEvent.UPDATE_GAME_STATE, (data: any) => {\r\n      getGameState();\r\n    });\r\n\r\n    return function cleanup() {\r\n      if (socketService) {\r\n        socketService.disconnect();\r\n      }\r\n    };\r\n  }, [context.gameId]);\r\n\r\n\r\n  const getGameState = () => {\r\n    API.post(\"getGame\", { gameId: context.gameId })\r\n      .then(function (response) {\r\n        setGameState(response.data.game);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n\r\n  const closeSnack = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnackOpen(false);\r\n  };\r\n\r\n  const getPing = (playerId: string | undefined) => {\r\n    if (playerId && pings) {\r\n      const pingInfo = pings.find(\r\n        (p: LatencyInfoMsg) => p.playerId === playerId\r\n      );\r\n      if (pingInfo) {\r\n        return \"Ping: \" + pingInfo.latency + \"ms\";\r\n      }\r\n    }\r\n    return \"Ping: 0ms\";\r\n  };\r\n\r\n  const viewSquare = (id: number) => {\r\n    setSquareToView(id);\r\n  };\r\n  const clearSquare = () => {\r\n    setSquareToView(undefined);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"board\">\r\n\r\n        {num_squares.map((n, index) => {\r\n          const id: number = index + 1;\r\n\r\n          return (<GameSquare gameInfo={gameState}\r\n            id={id}\r\n            key={id}\r\n            viewSquare={viewSquare} clearSquare={clearSquare}\r\n          />)\r\n        })}\r\n\r\n        <CenterDisplay gameInfo={gameState} socketService={socketService} getPing={getPing} getSquareId={() => squareToView} />\r\n      </div>\r\n\r\n\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        onClose={closeSnack}\r\n        open={snackOpen} autoHideDuration={5000} message={snackMsg}\r\n      />\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\Roman\\rent-day\\src\\client\\join\\DisplayAllGames.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\join\\StaticBoard.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\join\\CreateGame.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\api.ts",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\PieceType.ts",[],"C:\\Users\\Roman\\rent-day\\src\\core\\types\\GameEvent.ts",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\GameStatus.ts",[],"C:\\Users\\Roman\\rent-day\\src\\core\\config\\NyTheme.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\GameSquare.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\SquareType.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\SquarePieces.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\GamePiece.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\core\\config\\SquareData.ts",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\BoardSection.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\SquareInfo.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\PlayerClass.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\GoDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\CentralParkDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\UtilityDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\PropertyDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\TrainStationDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\ChanceDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\CenterDisplay.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\squareHelpers.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayAuction.tsx",["198","199"],"import React, { useEffect, useState } from \"react\";\r\nimport { AuctionState } from \"../../core/types/AuctionState\";\r\nimport { GameContext } from \"../../core/types/GameContext\";\r\nimport { GameState } from \"../../core/types/GameState\";\r\nimport { getGameContextFromLocalStorage, getMyPlayerId } from \"../helpers\";\r\nimport { SocketService } from \"../sockets/SocketService\";\r\nimport API from '../api';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Button, Container, TextField } from \"@material-ui/core\";\r\nimport { Bidder } from \"../../core/types/Bidder\";\r\nimport { faCheckSquare, faQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { GameEvent } from \"../../core/types/GameEvent\";\r\nimport { CircleLoader } from \"./CircleLoader\";\r\nimport { useIsMountedRef } from \"./useIsMountedRef\";\r\n\r\n\r\ninterface Props {\r\n  gameInfo: GameState | undefined;\r\n  socketService: SocketService;\r\n}\r\n\r\nexport const DisplayAuction: React.FC<Props> = ({ gameInfo, socketService }) => {\r\n\r\n  const context: GameContext = getGameContextFromLocalStorage();\r\n  const [auctionState, setAuctionState] = useState<AuctionState>();\r\n  const [myBid, setMyBid] = useState<number>();\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  useEffect(() => {\r\n    if (isMountedRef.current) {\r\n      getAuctionState();\r\n    }\r\n  }, [context.gameId, context.playerId]);\r\n\r\n  useEffect(() => {\r\n    if (isMountedRef.current) {\r\n      socketService.listenForEvent(GameEvent.AUCTION_UPDATE, (data: any) => {\r\n        getAuctionState();\r\n      });\r\n    }\r\n  }, [context.gameId, context.playerId]);\r\n\r\n  const getAuctionState = () => {\r\n    if (!isMountedRef.current) {\r\n      return;\r\n    }\r\n    API.post(\"getAuction\", { auctionId: gameInfo?.auctionId, context })\r\n      .then(function (response) {\r\n        setAuctionState(response.data.auction);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const isMe = (bidder: Bidder) => {\r\n    return bidder._id === getMyPlayerId();\r\n  }\r\n\r\n  const isAuctionFinished = () => {\r\n    return auctionState?.finished;\r\n  }\r\n\r\n  const alreadySubmittedBid = () => {\r\n    const myBid = auctionState?.bidders.find(b => b._id === getMyPlayerId());\r\n    return myBid && myBid.bid;\r\n  }\r\n\r\n  const getBidderIcon = (bidder: Bidder) => {\r\n    if (auctionState?.finished) {\r\n      if (bidder._id === auctionState.winnerId) {\r\n        return (<strong>${bidder.bid}</strong>);\r\n      }\r\n      return \"$\" + bidder.bid;\r\n    }\r\n\r\n    if (bidder.submittedBid) {\r\n      return <FontAwesomeIcon icon={faCheckSquare} color=\"green\" />;\r\n    }\r\n    return <FontAwesomeIcon icon={faQuestion} />;\r\n  };\r\n\r\n  const onChangeBid = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\r\n    setMyBid(parseInt(e.currentTarget.value));\r\n  };\r\n\r\n  const getInputField = () => {\r\n    if (alreadySubmittedBid()) {\r\n      const myBid = auctionState?.bidders.find(b => b._id === getMyPlayerId());\r\n      return \"$\" + myBid?.bid;\r\n    }\r\n    return (<TextField size=\"small\" type=\"number\" label=\"My Bid ($)\" onChange={(e) => onChangeBid(e)} />);\r\n  }\r\n\r\n  const getAuctionHeader = () => {\r\n    const squareId = auctionState?.squareId;\r\n    if (gameInfo && gameInfo.theme && squareId) {\r\n      return \"Auction - \" + gameInfo.theme[squareId].name;\r\n    }\r\n    return \"Auction\";\r\n  }\r\n\r\n  const getSubHeader = () => {\r\n    if (auctionState?.finished) {\r\n      if (auctionState.isTie) {\r\n        return \"It's a tie, you all lose\";\r\n      }\r\n      const winner = auctionState.bidders.find(\r\n        (b: Bidder) => b._id && b._id.toString() === auctionState.winnerId\r\n      );\r\n      return winner?.name + \" wins!\";\r\n    }\r\n    return \"The player to bid the highest wins and pays the 2nd highest bid. In the event of a tie, no one wins\";\r\n  }\r\n\r\n  const getNameStyle = (bidder: Bidder): React.CSSProperties => {\r\n    return { color: bidder.color };\r\n  };\r\n\r\n  const onSubmitBid = async () => {\r\n    API.post(\"actions/bid\", { bid: myBid, context })\r\n      .then(function (response) {\r\n        if (socketService) {\r\n          socketService.socket.emit(GameEvent.AUCTION_BID, { gameId: context.gameId });\r\n        }\r\n\r\n        getAuctionState();\r\n      })\r\n      .catch(function (error) {\r\n        if (error.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          alert(error.response.data);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n          // http.ClientRequest in node.js\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.log('Error', error.message);\r\n        }\r\n      });\r\n\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth=\"sm\" className=\"auction-container\">\r\n        <div className=\"auction-header\">\r\n          {getAuctionHeader()}\r\n        </div>\r\n        <div className=\"auction-sub-header\">\r\n          {getSubHeader()}\r\n        </div>\r\n\r\n        <TableContainer component={Paper} className=\"bid-table\">\r\n          <Table size=\"small\" aria-label=\"a dense table\">\r\n            <TableBody>\r\n              {auctionState?.bidders.map((row) => (\r\n                <TableRow key={row._id}>\r\n                  <TableCell component=\"th\" scope=\"row\" style={getNameStyle(row)}>\r\n                    {row.name}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {isMe(row) && !isAuctionFinished() ? getInputField() : getBidderIcon(row)}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        {alreadySubmittedBid() ? null : <Button color=\"primary\" variant=\"contained\" onClick={onSubmitBid}>Submit Bid</Button>}\r\n\r\n        {isAuctionFinished() ? <CircleLoader socketService={socketService} /> : null}\r\n      </Container>\r\n\r\n    </React.Fragment>\r\n  );\r\n\r\n};\r\n","C:\\Users\\Roman\\rent-day\\src\\client\\components\\SquareViewer.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\PlayerViewer.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayResults.tsx",["200"],"import React, { useEffect } from \"react\";\r\nimport { GameContext } from \"../../core/types/GameContext\";\r\nimport { GameEvent } from \"../../core/types/GameEvent\";\r\nimport { GameState } from \"../../core/types/GameState\";\r\nimport { getGameContextFromLocalStorage } from \"../helpers\";\r\nimport { SocketService } from \"../sockets/SocketService\";\r\nimport { AnimatedDice } from \"./AnimatedDice\";\r\nimport { Die } from \"./Die\";\r\nimport { useIsMountedRef } from \"./useIsMountedRef\";\r\n\r\ninterface Props {\r\n  gameInfo: GameState | undefined;\r\n  socketService: SocketService;\r\n}\r\n\r\nexport const DisplayResults: React.FC<Props> = ({ gameInfo, socketService }) => {\r\n\r\n  const context: GameContext = getGameContextFromLocalStorage();\r\n  const [showDiceAnimation, setShowDiceAnimation] = React.useState(false);\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  useEffect(() => {\r\n    if (!isMountedRef.current) {\r\n      return;\r\n    }\r\n    socketService.listenForEvent(GameEvent.ANIMATE_DICE, () => {\r\n      setShowDiceAnimation(true);\r\n    });\r\n\r\n    socketService.listenForEvent(GameEvent.UPDATE_GAME_STATE, (data: any) => {\r\n      setShowDiceAnimation(false);\r\n    });\r\n  }, [context.gameId]);\r\n\r\n\r\n  const getResults = () => {\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <div className=\"dice-roll\">\r\n          <Die key={1} value={gameInfo!.results.roll.die1} />\r\n          <Die key={2} value={gameInfo!.results.roll.die2} />\r\n        </div>\r\n\r\n        <div className=\"description\">\r\n          {gameInfo?.results.description}\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  const getEmptyResults = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"dice-roll\">\r\n\r\n        </div>\r\n        <div className=\"description\">\r\n\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {showDiceAnimation ? <AnimatedDice key={5} /> : null}\r\n      {gameInfo && !showDiceAnimation && gameInfo.results ? getResults() : getEmptyResults()}\r\n    </React.Fragment>\r\n  );\r\n\r\n};\r\n","C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayActions.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\squares\\ColorBar.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayPlayers.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\core\\enums\\SkillType.ts",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\useIsMountedRef.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\CircleLoader.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\AnimatedDice.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\Die.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\components\\DisplayPlayer.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\auth\\SignUpPage.tsx",[],"C:\\Users\\Roman\\rent-day\\src\\client\\auth\\LoginPage.tsx",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":40,"column":35,"nodeType":"207","messageId":"208","endLine":40,"endColumn":41},{"ruleId":"209","severity":1,"message":"210","line":45,"column":6,"nodeType":"211","endLine":45,"endColumn":40,"suggestions":"212"},{"ruleId":"209","severity":1,"message":"213","line":78,"column":6,"nodeType":"211","endLine":78,"endColumn":22,"suggestions":"214"},{"ruleId":"209","severity":1,"message":"210","line":32,"column":6,"nodeType":"211","endLine":32,"endColumn":40,"suggestions":"215"},{"ruleId":"209","severity":1,"message":"216","line":59,"column":6,"nodeType":"211","endLine":59,"endColumn":22,"suggestions":"217"},{"ruleId":"209","severity":1,"message":"218","line":39,"column":6,"nodeType":"211","endLine":39,"endColumn":40,"suggestions":"219"},{"ruleId":"209","severity":1,"message":"220","line":47,"column":6,"nodeType":"211","endLine":47,"endColumn":40,"suggestions":"221"},{"ruleId":"209","severity":1,"message":"222","line":33,"column":6,"nodeType":"211","endLine":33,"endColumn":22,"suggestions":"223"},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"@typescript-eslint/no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getGameState'. Either include it or remove the dependency array.","ArrayExpression",["226"],"React Hook useEffect has missing dependencies: 'getGameState', 'history', and 'socketService'. Either include them or remove the dependency array.",["227"],["228"],"React Hook useEffect has missing dependencies: 'getGameState' and 'socketService'. Either include them or remove the dependency array.",["229"],"React Hook useEffect has missing dependencies: 'getAuctionState' and 'isMountedRef'. Either include them or remove the dependency array.",["230"],"React Hook useEffect has missing dependencies: 'getAuctionState', 'isMountedRef', and 'socketService'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has missing dependencies: 'isMountedRef' and 'socketService'. Either include them or remove the dependency array.",["232"],"no-global-assign","no-unsafe-negation",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"233","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},"Update the dependencies array to be: [context.gameId, context.playerId, getGameState]",{"range":"246","text":"247"},"Update the dependencies array to be: [context.gameId, getGameState, history, socketService]",{"range":"248","text":"249"},{"range":"250","text":"247"},"Update the dependencies array to be: [context.gameId, getGameState, socketService]",{"range":"251","text":"252"},"Update the dependencies array to be: [context.gameId, context.playerId, getAuctionState, isMountedRef]",{"range":"253","text":"254"},"Update the dependencies array to be: [context.gameId, context.playerId, getAuctionState, isMountedRef, socketService]",{"range":"255","text":"256"},"Update the dependencies array to be: [context.gameId, isMountedRef, socketService]",{"range":"257","text":"258"},[1824,1858],"[context.gameId, context.playerId, getGameState]",[2618,2634],"[context.gameId, getGameState, history, socketService]",[1212,1246],[1835,1851],"[context.gameId, getGameState, socketService]",[1640,1674],"[context.gameId, context.playerId, getAuctionState, isMountedRef]",[1864,1898],"[context.gameId, context.playerId, getAuctionState, isMountedRef, socketService]",[1157,1173],"[context.gameId, isMountedRef, socketService]"]